又称外观模式：

参考网址：https://www.cnblogs.com/dreamroute/p/3667446.html
https://www.javazhiyin.com/22864.html

在外观模式下，当客户端需要子系统为其服务时，不再关心子系统的内部结构以及内部运行原理。
只需通过向外观角色传达服务指令，由外观角色直接调用子系统的各种服务，最后只返回给客户端一个最终结果。
一句话概括：封装交互，简化调用。

Java中的门面模式，一般来说他的用途是隐藏一些不希望用户看到的东西，
比如方法，变量，并且这些变量是不能够设置成私有的，因为在系统内部有些地方需要调用。
在Tomcat的HttpServletRequest和HttpServletResponse这两个对象中就使用了门面模式。

例子说明：

有一个接口叫做Person，有eat()方法，有一个实现类Chinese中国人，中国人类里面还有run()方法，
此系统还有一个类InnerSystem要调用Chinese中的name和run()方法，那么此时的name和run()方法就不能设置成私有，
否则在InnerSystem中就调不到name和run()了。这是系统内部的活动。现在有一种情况出现了，
既然InnerSystem的属性和方法设置成public，那么其他任何类都能够调用得到，
但是我希望系统外部又不能调用而只希望系统内部能调用。此时门面模式就有用了。
采用门面类ChineseFacade，他也实现了Person接口，并且把Chinese作为私有变量，
让门面类来接待客人，门面类通过私有变量来与里面的对象打交道。此时用户只需要面对门面类，
而里面的Chinese对象甚至都不用知道外面还有门面对象